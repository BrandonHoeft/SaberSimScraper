# NOTE TO SELF: spin this up as a jupyter notebook first before doing further
# Development. Will be a good future learning resource. 

import requests
from bs4 import BeautifulSoup
 
batters_url = "https://www.fangraphs.com/dailyprojections.aspx?pos=all&stats=bat&type=sabersim"
pitchers_url = "https://www.fangraphs.com/dailyprojections.aspx?pos=all&stats=pit&type=sabersim"


###############################################################################
# package GET request, send & catch response. Retrieve form data for a POST request
###############################################################################

r = requests.get(batters_url)
html_doc = r.text
tag_soup = BeautifulSoup(html_doc, 'html.parser')


###############################################################################
# Capture Form Data Parameters programmatically by parsing HTML form tags
###############################################################################

# Used Chrome Dev tools to identify the form params needed potentially, and the
# postman app to test which subset will yield a successful POST of the .csv data.
# just needed 3: EVENTTARGET, VIEWSTATE, EVENTVALIDATION.
form_info = tag_soup.find_all('input',{"id" : {"__VIEWSTATE", "__EVENTVALIDATION"}})

# initialize dict to store all params.
param_dict = {"__EVENTTARGET" : "DFSBoard1$cmdCSV"}

# update dict after parsing form info above.
for i in range(len(form_info)):
    key = form_info[i]['id']
    param_dict[key] = form_info[i]['value']

###############################################################################
# Make POST request to retrieve CSV data using the parsed form data above,
# https://en.wikipedia.org/wiki/POST_(HTTP)
# tested using Postman to make sure have right parameters
###############################################################################

# set the type of the body for the HTTP request as headers. Per wikipedia
# https://en.wikipedia.org/wiki/Percent-encoding#The_application/x-www-form-urlencoded_type
# When sent in an HTTP POST request or via email, the data is placed in the 
# body of the message, and application/x-www-form-urlencoded is included in the 
# message's Content-Type header
headers = {'Content-Type' : 'application/x-www-form-urlencoded'}

# package the POST request, send & catch response
r = requests.post(batters_url, data=param_dict, headers=headers)
print(r.status_code, r.ok)

r.text?
# extract response data
sabersim_data = r.text

print(sabersim_data)








###############################################################################
# DEPRECATE. Make post request to retrieve CSV data using form source string 
# from Chrome Devtools
###############################################################################

# set the form data, which will be submitted as the body of HTTP post request to web server.
# This is the raw, unparsed body of the request message (from Chrome Dev tools)
data_body = 'RadScriptManager1_TSM=&__EVENTTARGET=DFSBoard1%24cmdCSV&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwUKMTg3NjM5MzUwNg9kFgQCAQ9kFgICAQ8WAh4EVGV4dAWDAjxtZXRhIG5hbWU9J2Rlc2NyaXB0aW9uJyBjb250ZW50PSc2LzI0LzIwMTggYmFzZWJhbGwgcHJvamVjdGlvbnMgZm9yIHBpdGNoZXJzIGFuZCBkYWlseSBmYW50YXN5IGJhc2ViYWxsJyAvPg0KPG1ldGEgbmFtZT0na2V5d29yZHMnIGNvbnRlbnQ9J2RhaWx5IGZhbnRhc3kgYmFzZWJhbGwgcHJvamVjdGlvbnMsIGRmcyBwcm9qZWN0aW9ucywgZmFuZHVlbCBiYXNlYmFsbCBwcm9qZWN0aW9ucywgZHJhZnRraW5ncyBiYXNlYmFsbCBwcm9qZWN0aW9ucycgLz5kAgMPZBYCAgUPZBYQAgEPFCsAAhQrAAIPFgoeDVNlbGVjdGVkSW5kZXgCAR4VRW5hYmxlRW1iZWRkZWRTY3JpcHRzZx4XRW5hYmxlQWpheFNraW5SZW5kZXJpbmdoHhxFbmFibGVFbWJlZGRlZEJhc2VTdHlsZXNoZWV0Zx4SUmVzb2x2ZWRSZW5kZXJNb2RlCylyVGVsZXJpay5XZWIuVUkuUmVuZGVyTW9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxNi4yLjYwNy40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0AWQQFgJmAgEWAhQrAAIPFgIeC05hdmlnYXRlVXJsBU1kYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1iYXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkFCsAAg8WAh8GBU1kYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkDxYCZmYWAQVuVGVsZXJpay5XZWIuVUkuUmFkVGFiLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDE2LjIuNjA3LjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDRkFgRmDw8WAh8GBU1kYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1iYXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkAgEPDxYCHwYFTWRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQCAw8UKwACFCsAAg8WCh8BZh8CZx8DaB8EZx8FCysEAWQQFgtmAgECAgIDAgQCBQIGAgcCCAIJAgoWCxQrAAIPFgIfBgVNZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9YmF0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTBkZBQrAAIPFgIfBgVLZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1jJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQUKwACDxYCHwYFTGRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9MWImc3RhdHM9YmF0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTBkZBQrAAIPFgIfBgVMZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz0yYiZzdGF0cz1iYXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkFCsAAg8WAh8GBUxkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPXNzJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQUKwACDxYCHwYFTGRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9M2Imc3RhdHM9YmF0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTBkZBQrAAIPFgIfBgVMZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1yZiZzdGF0cz1iYXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkFCsAAg8WAh8GBUxkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWNmJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQUKwACDxYCHwYFTGRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9bGYmc3RhdHM9YmF0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTBkZBQrAAIPFgIfBgVMZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1vZiZzdGF0cz1iYXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkFCsAAg8WAh8GBUxkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWRoJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQPFgtmZmZmZmZmZmZmZhYBBW5UZWxlcmlrLldlYi5VSS5SYWRUYWIsIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMTYuMi42MDcuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNGQWFmYPDxYCHwYFTWRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQCAQ8PFgIfBgVLZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1jJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQCAg8PFgIfBgVMZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz0xYiZzdGF0cz1iYXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkAgMPDxYCHwYFTGRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9MmImc3RhdHM9YmF0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTBkZAIEDw8WAh8GBUxkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPXNzJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQCBQ8PFgIfBgVMZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz0zYiZzdGF0cz1iYXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkAgYPDxYCHwYFTGRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9cmYmc3RhdHM9YmF0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTBkZAIHDw8WAh8GBUxkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWNmJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQCCA8PFgIfBgVMZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1sZiZzdGF0cz1iYXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MGRkAgkPDxYCHwYFTGRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9b2Ymc3RhdHM9YmF0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTBkZAIKDw8WAh8GBUxkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWRoJnN0YXRzPWJhdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQCBQ8UKwACDxYMHwRnHwAFCUFsbCBUZWFtcx8DaB4TY2FjaGVkU2VsZWN0ZWRWYWx1ZWQfBQsrBAIfAmdkEBYfZgIBAgICAwIEAgUCBgIHAggCCQIKAgsCDAINAg4CDwIQAhECEgITAhQCFQIWAhcCGAIZAhoCGwIcAh0CHhYfFCsAAg8WBh8ABQlBbGwgVGVhbXMeBVZhbHVlBQEwHghTZWxlY3RlZGdkZBQrAAIPFgYfAAUGQW5nZWxzHwgFATEfCWhkZBQrAAIPFgYfAAUGQXN0cm9zHwgFAjIxHwloZGQUKwACDxYGHwAFCUF0aGxldGljcx8IBQIxMB8JaGRkFCsAAg8WBh8ABQlCbHVlIEpheXMfCAUCMTQfCWhkZBQrAAIPFgYfAAUGQnJhdmVzHwgFAjE2HwloZGQUKwACDxYGHwAFB0JyZXdlcnMfCAUCMjMfCWhkZBQrAAIPFgYfAAUJQ2FyZGluYWxzHwgFAjI4HwloZGQUKwACDxYGHwAFBEN1YnMfCAUCMTcfCWhkZBQrAAIPFgYfAAUMRGlhbW9uZGJhY2tzHwgFAjE1HwloZGQUKwACDxYGHwAFB0RvZGdlcnMfCAUCMjIfCWhkZBQrAAIPFgYfAAUGR2lhbnRzHwgFAjMwHwloZGQUKwACDxYGHwAFB0luZGlhbnMfCAUBNR8JaGRkFCsAAg8WBh8ABQhNYXJpbmVycx8IBQIxMR8JaGRkFCsAAg8WBh8ABQdNYXJsaW5zHwgFAjIwHwloZGQUKwACDxYGHwAFBE1ldHMfCAUCMjUfCWhkZBQrAAIPFgYfAAUJTmF0aW9uYWxzHwgFAjI0HwloZGQUKwACDxYGHwAFB09yaW9sZXMfCAUBMh8JaGRkFCsAAg8WBh8ABQZQYWRyZXMfCAUCMjkfCWhkZBQrAAIPFgYfAAUIUGhpbGxpZXMfCAUCMjYfCWhkZBQrAAIPFgYfAAUHUGlyYXRlcx8IBQIyNx8JaGRkFCsAAg8WBh8ABQdSYW5nZXJzHwgFAjEzHwloZGQUKwACDxYGHwAFBFJheXMfCAUCMTIfCWhkZBQrAAIPFgYfAAUHUmVkIFNveB8IBQEzHwloZGQUKwACDxYGHwAFBFJlZHMfCAUCMTgfCWhkZBQrAAIPFgYfAAUHUm9ja2llcx8IBQIxOR8JaGRkFCsAAg8WBh8ABQZSb3lhbHMfCAUBNx8JaGRkFCsAAg8WBh8ABQZUaWdlcnMfCAUBNh8JaGRkFCsAAg8WBh8ABQVUd2lucx8IBQE4HwloZGQUKwACDxYGHwAFCVdoaXRlIFNveB8IBQE0HwloZGQUKwACDxYGHwAFB1lhbmtlZXMfCAUBOR8JaGRkDxYfZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZhYBBXdUZWxlcmlrLldlYi5VSS5SYWRDb21ib0JveEl0ZW0sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMTYuMi42MDcuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBZCZg8PFgQeCENzc0NsYXNzBQlyY2JIZWFkZXIeBF8hU0ICAmRkAgEPDxYEHwoFCXJjYkZvb3Rlch8LAgJkZAICDw8WBh8ABQlBbGwgVGVhbXMfCAUBMB8JZ2RkAgMPDxYGHwAFBkFuZ2Vscx8IBQExHwloZGQCBA8PFgYfAAUGQXN0cm9zHwgFAjIxHwloZGQCBQ8PFgYfAAUJQXRobGV0aWNzHwgFAjEwHwloZGQCBg8PFgYfAAUJQmx1ZSBKYXlzHwgFAjE0HwloZGQCBw8PFgYfAAUGQnJhdmVzHwgFAjE2HwloZGQCCA8PFgYfAAUHQnJld2Vycx8IBQIyMx8JaGRkAgkPDxYGHwAFCUNhcmRpbmFscx8IBQIyOB8JaGRkAgoPDxYGHwAFBEN1YnMfCAUCMTcfCWhkZAILDw8WBh8ABQxEaWFtb25kYmFja3MfCAUCMTUfCWhkZAIMDw8WBh8ABQdEb2RnZXJzHwgFAjIyHwloZGQCDQ8PFgYfAAUGR2lhbnRzHwgFAjMwHwloZGQCDg8PFgYfAAUHSW5kaWFucx8IBQE1HwloZGQCDw8PFgYfAAUITWFyaW5lcnMfCAUCMTEfCWhkZAIQDw8WBh8ABQdNYXJsaW5zHwgFAjIwHwloZGQCEQ8PFgYfAAUETWV0cx8IBQIyNR8JaGRkAhIPDxYGHwAFCU5hdGlvbmFscx8IBQIyNB8JaGRkAhMPDxYGHwAFB09yaW9sZXMfCAUBMh8JaGRkAhQPDxYGHwAFBlBhZHJlcx8IBQIyOR8JaGRkAhUPDxYGHwAFCFBoaWxsaWVzHwgFAjI2HwloZGQCFg8PFgYfAAUHUGlyYXRlcx8IBQIyNx8JaGRkAhcPDxYGHwAFB1JhbmdlcnMfCAUCMTMfCWhkZAIYDw8WBh8ABQRSYXlzHwgFAjEyHwloZGQCGQ8PFgYfAAUHUmVkIFNveB8IBQEzHwloZGQCGg8PFgYfAAUEUmVkcx8IBQIxOB8JaGRkAhsPDxYGHwAFB1JvY2tpZXMfCAUCMTkfCWhkZAIcDw8WBh8ABQZSb3lhbHMfCAUBNx8JaGRkAh0PDxYGHwAFBlRpZ2Vycx8IBQE2HwloZGQCHg8PFgYfAAUFVHdpbnMfCAUBOB8JaGRkAh8PDxYGHwAFCVdoaXRlIFNveB8IBQE0HwloZGQCIA8PFgYfAAUHWWFua2Vlcx8IBQE5HwloZGQCBw8UKwACDxYMHwRnHwAFA0FsbB8DaB8HZB8FCysEAh8CZ2QQFgNmAgECAhYDFCsAAg8WAh8JZ2RkFCsAAg8WAh8JaGRkFCsAAg8WAh8JaGRkDxYDZmZmFgEFd1RlbGVyaWsuV2ViLlVJLlJhZENvbWJvQm94SXRlbSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxNi4yLjYwNy40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FgYCAg8PFgIfCWdkZAIDDw8WAh8JaGRkAgQPDxYCHwloZGQCCw8UKwACFCsAAg8WCh8BZh8CZx8DaB8FCysEAR8EZ2QQFgJmAgEWAhQrAAIPFgIfBgVNZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTBkZBQrAAIPFgIfBgVLZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9cm90b3FsJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQPFgJmZhYBBW5UZWxlcmlrLldlYi5VSS5SYWRUYWIsIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMTYuMi42MDcuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNGQWBGYPDxYCHwYFTWRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQCAQ8PFgIfBgVLZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9cm90b3FsJnRlYW09MCZsZz1hbGwmcGxheWVycz0wZGQCDQ8WAh8ABe0BPGNlbnRlcj48ZGl2IHN0eWxlPSJmb250OiAxMHB4IHZlcmRhbmEsIGdlbmV2YSwgbHVjaWRhLCAnbHVjaWRhIGdyYW5kZScsIGFyaWFsLCBoZWx2ZXRpY2EsIHNhbnMtc2VyaWYiPjxzdHJvbmc%2BU2FiZXJTaW0gZGFpbHkgcHJvamVjdGlvbnMgYXJlIHByb3ZpZGVkIGNvdXJ0ZXN5IG9mIDxhIGhyZWY9Imh0dHA6Ly93d3cuc2FiZXJzaW0uY29tIj5TYWJlclNpbS5jb208L2E%2BPC9zdHJvbmc%2BPC9kaXY%2BPC9jZW50ZXI%2BZAIRDzwrAA4CABQrAAIPFgweC18hRGF0YUJvdW5kZx8EZx8CZx8DaB4LXyFJdGVtQ291bnQCAR8FCysEAmQXAwULRWRpdEluZGV4ZXMWAAUPU2VsZWN0ZWRJbmRleGVzFgAFCFBhZ2VTaXplAh4BFgIWCw9mFCsAEA8FD0dyaWRCb3VuZENvbHVtbhQrAAUWCB4JRGF0YUZpZWxkBQROYW1lHgpIZWFkZXJUZXh0BWk8YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTAsZCI%2BTmFtZTwvYT4eCERhdGFUeXBlGSsCHgRvaW5kAgIWBB8KBRFncmlkX2xpbmVfcmVndWxhch8LAgJkZAUETmFtZQ8FD0dyaWRCb3VuZENvbHVtbhQrAAUWCB8OBQRUZWFtHw8FaTxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MSxkIj5UZWFtPC9hPh8QGSsCHxECAxYEHwoFEWdyaWRfbGluZV9yZWd1bGFyHwsCAmRkBQRUZWFtDwUPR3JpZEJvdW5kQ29sdW1uFCsABRYIHw4FBEdhbWUfDwVpPGEgaHJlZj0iZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTAmc29ydD0yLGQiPkdhbWU8L2E%2BHxAZKwIfEQIEFgQfCgURZ3JpZF9saW5lX3JlZ3VsYXIfCwICZGQFBEdhbWUPBQ9HcmlkQm91bmRDb2x1bW4UKwAFFgofDgUBVx8PBWY8YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTMsZCI%2BVzwvYT4eEERhdGFGb3JtYXRTdHJpbmcFB3swOi4wMH0fEBkpWlN5c3RlbS5TaW5nbGUsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OR8RAgUWBh8KBRFncmlkX2xpbmVfcmVndWxhch4PSG9yaXpvbnRhbEFsaWduCyopU3lzdGVtLldlYi5VSS5XZWJDb250cm9scy5Ib3Jpem9udGFsQWxpZ24DHwsCgoAEFgQfEwsrBgMfCwKAgARkBQFXDwUPR3JpZEJvdW5kQ29sdW1uFCsABRYKHw4FAklQHw8FZzxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9NCxkIj5JUDwvYT4fEgUHezA6LjAwfR8QGSsFHxECBhYGHwoFEWdyaWRfbGluZV9yZWd1bGFyHxMLKwYDHwsCgoAEFgQfEwsrBgMfCwKAgARkBQJJUA8FD0dyaWRCb3VuZENvbHVtbhQrAAUWCh8OBQNUQkYfDwVoPGEgaHJlZj0iZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTAmc29ydD01LGQiPlRCRjwvYT4fEgUHezA6LjAwfR8QGSsFHxECBxYGHwoFEWdyaWRfbGluZV9yZWd1bGFyHxMLKwYDHwsCgoAEFgQfEwsrBgMfCwKAgARkBQNUQkYPBQ9HcmlkQm91bmRDb2x1bW4UKwAFFgofDgUBSB8PBWY8YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTYsZCI%2BSDwvYT4fEgUHezA6LjAwfR8QGSlaU3lzdGVtLkRvdWJsZSwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5HxECCBYGHwoFEWdyaWRfbGluZV9yZWd1bGFyHxMLKwYDHwsCgoAEFgQfEwsrBgMfCwKAgARkBQFIDwUPR3JpZEJvdW5kQ29sdW1uFCsABRYKHw4FAjFCHw8FZzxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9NyxkIj4xQjwvYT4fEgUHezA6LjAwfR8QGSsFHxECCRYGHwoFEWdyaWRfbGluZV9yZWd1bGFyHxMLKwYDHwsCgoAEFgQfEwsrBgMfCwKAgARkBQIxQg8FD0dyaWRCb3VuZENvbHVtbhQrAAUWCh8OBQIyQh8PBWc8YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTgsZCI%2BMkI8L2E%2BHxIFB3swOi4wMH0fEBkrBR8RAgoWBh8KBRFncmlkX2xpbmVfcmVndWxhch8TCysGAx8LAoKABBYEHxMLKwYDHwsCgIAEZAUCMkIPBQ9HcmlkQm91bmRDb2x1bW4UKwAFFgofDgUCM0IfDwVnPGEgaHJlZj0iZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTAmc29ydD05LGQiPjNCPC9hPh8SBQd7MDouMDB9HxAZKwUfEQILFgYfCgURZ3JpZF9saW5lX3JlZ3VsYXIfEwsrBgMfCwKCgAQWBB8TCysGAx8LAoCABGQFAjNCDwUPR3JpZEJvdW5kQ29sdW1uFCsABRYKHw4FAkhSHw8FaDxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MTAsZCI%2BSFI8L2E%2BHxIFB3swOi4wMH0fEBkrBR8RAgwWBh8KBRFncmlkX2xpbmVfcmVndWxhch8TCysGAx8LAoKABBYEHxMLKwYDHwsCgIAEZAUCSFIPBQ9HcmlkQm91bmRDb2x1bW4UKwAFFgofDgUCQkIfDwVoPGEgaHJlZj0iZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTAmc29ydD0xMSxkIj5CQjwvYT4fEgUHezA6LjAwfR8QGSsFHxECDRYGHwoFEWdyaWRfbGluZV9yZWd1bGFyHxMLKwYDHwsCgoAEFgQfEwsrBgMfCwKAgARkBQJCQg8FD0dyaWRCb3VuZENvbHVtbhQrAAUWCh8OBQJTTx8PBWg8YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTEyLGQiPlNPPC9hPh8SBQd7MDouMDB9HxAZKwUfEQIOFgYfCgURZ3JpZF9saW5lX3JlZ3VsYXIfEwsrBgMfCwKCgAQWBB8TCysGAx8LAoCABGQFAlNPDwUPR3JpZEJvdW5kQ29sdW1uFCsABRYKHw4FBVlhaG9vHw8FazxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MTMsZCI%2BWWFob288L2E%2BHxIFB3swOi4wMH0fEBkrBR8RAg8WBh8KBRFncmlkX2xpbmVfcmVndWxhch8TCysGAx8LAoKABBYEHxMLKwYDHwsCgIAEZAUFWWFob28PBQ9HcmlkQm91bmRDb2x1bW4UKwAFFgofDgUHRmFuRHVlbB8PBW08YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTE0LGQiPkZhbkR1ZWw8L2E%2BHxIFB3swOi4wMH0fEBkrBR8RAhAWBh8KBRFncmlkX2xpbmVfcmVndWxhch8TCysGAx8LAoKABBYEHxMLKwYDHwsCgIAEZAUHRmFuRHVlbA8FD0dyaWRCb3VuZENvbHVtbhQrAAUWCh8OBQpEcmFmdEtpbmdzHw8FcDxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MTUsZCI%2BRHJhZnRLaW5nczwvYT4fEgUHezA6LjAwfR8QGSsFHxECERYGHwoFEWdyaWRfbGluZV9yZWd1bGFyHxMLKwYDHwsCgoAEFgQfEwsrBgMfCwKAgARkBQpEcmFmdEtpbmdzZGUUKwAACyl5VGVsZXJpay5XZWIuVUkuR3JpZENoaWxkTG9hZE1vZGUsIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMTYuMi42MDcuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNAE8KwAHAAspdFRlbGVyaWsuV2ViLlVJLkdyaWRFZGl0TW9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxNi4yLjYwNy40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0ARYCHgRfZWZzFgIeE2NzX3BvcHVwc19DbG9zZVRleHQFBUNsb3NlZBYOHwxnHhRJc0JvdW5kVG9Gb3J3YXJkT25seWgeBV9xZWx0GSlnU3lzdGVtLkRhdGEuRGF0YVJvd1ZpZXcsIFN5c3RlbS5EYXRhLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OR4IRGF0YUtleXMWAB4OQ3VzdG9tUGFnZVNpemUCHh4FXyFDSVMXAB8NAh1kZhYGZg8UKwADZGRkZAIBDxYFFCsAAg8WDh8MZx8WaB8XGSsKHxgWAB8ZAh4fGhcAHw0CHWQXBAULXyFJdGVtQ291bnQCHQUIXyFQQ291bnQCAQUQQ3VycmVudFBhZ2VJbmRleGYFBl8hRFNJQwIdFgIeA19zZRYCHgJfY2ZkFhBkZGRkZGRkZGRkZGRkZGRkFgJnZxYCZg9kFnhmD2QWBGYPDxYGHwoFCCByZ1BhZ2VyHwsCAh4HVmlzaWJsZWhkFgJmDw8WBh4KQ29sdW1uU3BhbgIQHwoFC3JnUGFnZXJDZWxsHwsCAmQWAmYPZBYCAgMPDxYEHwoFEHJnV3JhcCByZ0FkdlBhcnQfCwICZBYCAgEPFCsAAg8WHB4RRW5hYmxlQXJpYVN1cHBvcnRoHhNFbmFibGVFbWJlZGRlZFNraW5zaB4ZUmVnaXN0ZXJXaXRoU2NyaXB0TWFuYWdlcmcfDGceHU9uQ2xpZW50U2VsZWN0ZWRJbmRleENoYW5naW5nBTBUZWxlcmlrLldlYi5VSS5HcmlkLkNoYW5naW5nUGFnZVNpemVDb21ib0hhbmRsZXIeDFRhYmxlU3VtbWFyeQUbUGFnZSBTaXplIERyb3AgRG93biBDb250cm9sHwsCgAIfB2QeBVdpZHRoGwAAAMDMzBBACAAAAB8EZx4KSW5wdXRUaXRsZWUeHE9uQ2xpZW50U2VsZWN0ZWRJbmRleENoYW5nZWQFLlRlbGVyaWsuV2ViLlVJLkdyaWQuQ2hhbmdlUGFnZVNpemVDb21ib0hhbmRsZXIeDFRhYmxlQ2FwdGlvbgUQUGFnZVNpemVDb21ib0JveB8CZ2QPFCsABBQrAAIPFgYfAAUCMTAfCAUCMTAfCWgWAh4Qb3duZXJUYWJsZVZpZXdJZAUTREZTQm9hcmQxX2RnMV9jdGwwMGQUKwACDxYGHwAFAjIwHwgFAjIwHwloFgIfKAUTREZTQm9hcmQxX2RnMV9jdGwwMGQUKwACDxYGHwAFAjMwHwgFAjMwHwlnFgIfKAUTREZTQm9hcmQxX2RnMV9jdGwwMGQUKwACDxYGHwAFAjUwHwgFAjUwHwloFgIfKAUTREZTQm9hcmQxX2RnMV9jdGwwMGQPFCsBBGZmZmYWAQV3VGVsZXJpay5XZWIuVUkuUmFkQ29tYm9Cb3hJdGVtLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDE2LjIuNjA3LjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQWDGYPDxYEHwoFCXJjYkhlYWRlch8LAgJkZAIBDw8WBB8KBQlyY2JGb290ZXIfCwICZGQCAg8PFgYfAAUCMTAfCAUCMTAfCWgWAh8oBRNERlNCb2FyZDFfZGcxX2N0bDAwZAIDDw8WBh8ABQIyMB8IBQIyMB8JaBYCHygFE0RGU0JvYXJkMV9kZzFfY3RsMDBkAgQPDxYGHwAFAjMwHwgFAjMwHwlnFgIfKAUTREZTQm9hcmQxX2RnMV9jdGwwMGQCBQ8PFgYfAAUCNTAfCAUCNTAfCWgWAh8oBRNERlNCb2FyZDFfZGcxX2N0bDAwZAIBD2QWJGYPDxYEHwAFBiZuYnNwOx8daGRkAgEPDxYEHwAFBiZuYnNwOx8daGRkAgIPDxYCHwAFaTxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MCxkIj5OYW1lPC9hPmRkAgMPDxYCHwAFaTxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MSxkIj5UZWFtPC9hPmRkAgQPDxYCHwAFaTxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MixkIj5HYW1lPC9hPmRkAgUPDxYCHwAFZjxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MyxkIj5XPC9hPmRkAgYPDxYCHwAFZzxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9NCxkIj5JUDwvYT5kZAIHDw8WAh8ABWg8YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTUsZCI%2BVEJGPC9hPmRkAggPDxYCHwAFZjxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9NixkIj5IPC9hPmRkAgkPDxYCHwAFZzxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9NyxkIj4xQjwvYT5kZAIKDw8WAh8ABWc8YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTgsZCI%2BMkI8L2E%2BZGQCCw8PFgIfAAVnPGEgaHJlZj0iZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTAmc29ydD05LGQiPjNCPC9hPmRkAgwPDxYCHwAFaDxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MTAsZCI%2BSFI8L2E%2BZGQCDQ8PFgIfAAVoPGEgaHJlZj0iZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTAmc29ydD0xMSxkIj5CQjwvYT5kZAIODw8WAh8ABWg8YSBocmVmPSJkYWlseXByb2plY3Rpb25zLmFzcHg%2FcG9zPWFsbCZzdGF0cz1waXQmdHlwZT1zYWJlcnNpbSZ0ZWFtPTAmbGc9YWxsJnBsYXllcnM9MCZzb3J0PTEyLGQiPlNPPC9hPmRkAg8PDxYCHwAFazxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MTMsZCI%2BWWFob288L2E%2BZGQCEA8PFgIfAAVtPGEgaHJlZj0iZGFpbHlwcm9qZWN0aW9ucy5hc3B4P3Bvcz1hbGwmc3RhdHM9cGl0JnR5cGU9c2FiZXJzaW0mdGVhbT0wJmxnPWFsbCZwbGF5ZXJzPTAmc29ydD0xNCxkIj5GYW5EdWVsPC9hPmRkAhEPDxYCHwAFcDxhIGhyZWY9ImRhaWx5cHJvamVjdGlvbnMuYXNweD9wb3M9YWxsJnN0YXRzPXBpdCZ0eXBlPXNhYmVyc2ltJnRlYW09MCZsZz1hbGwmcGxheWVycz0wJnNvcnQ9MTUsZCI%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%2BPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTA2MDMmcG9zaXRpb249UCI%2BQ2hyaXMgU2FsZTwvYT5kZAIDDw8WAh8ABQdSZWQgU294ZGQCBA8PFgIfAAUJU0VBIEAgQk9TZGQCBQ8PFgIfAAUDLjQ5ZGQCBg8PFgIfAAUENi41MmRkAgcPDxYCHwAFBTI2Ljc1ZGQCCA8PFgIfAAUENS42NWRkAgkPDxYCHwAFBDMuNjRkZAIKDw8WAh8ABQQxLjE0ZGQCCw8PFgIfAAUDLjA5ZGQCDA8PFgIfAAUDLjc4ZGQCDQ8PFgIfAAUEMi4wNWRkAg4PDxYCHwAFBDguMjVkZAIPDw8WAh8ABQUyNS40MWRkAhAPDxYCHwAFBTQyLjMyZGQCEQ8PFgIfAAUFMjMuNzdkZAIFD2QWAmYPDxYCHx1oZGQCBg8PFgIfKQUBMmQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAVCPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTcxNDkmcG9zaXRpb249UCI%2BRG9taW5nbyBHZXJtYW48L2E%2BZGQCAw8PFgIfAAUHWWFua2Vlc2RkAgQPDxYCHwAFCE5ZWSBAIFRCZGQCBQ8PFgIfAAUDLjQ3ZGQCBg8PFgIfAAUENi4yN2RkAgcPDxYCHwAFBTI2LjI1ZGQCCA8PFgIfAAUENS43OWRkAgkPDxYCHwAFBDMuOTVkZAIKDw8WAh8ABQQxLjA1ZGQCCw8PFgIfAAUDLjE4ZGQCDA8PFgIfAAUDLjYwZGQCDQ8PFgIfAAUEMi4zNmRkAg4PDxYCHwAFBDYuMzZkZAIPDw8WAh8ABQUyMC4yMGRkAhAPDxYCHwAFBTM1LjMxZGQCEQ8PFgIfAAUFMTguOTFkZAIHD2QWAmYPDxYCHx1oZGQCCA8PFgIfKQUBM2QWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAU8PGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9NDgwNiZwb3NpdGlvbj1QIj5SaWNoIEhpbGw8L2E%2BZGQCAw8PFgIfAAUHRG9kZ2Vyc2RkAgQPDxYCHwAFCUxBRCBAIE5ZTWRkAgUPDxYCHwAFAy40MmRkAgYPDxYCHwAFBDUuODVkZAIHDw8WAh8ABQUyNC42OGRkAggPDxYCHwAFBDQuNDFkZAIJDw8WAh8ABQQyLjczZGQCCg8PFgIfAAUDLjg1ZGQCCw8PFgIfAAUDLjA3ZGQCDA8PFgIfAAUDLjc2ZGQCDQ8PFgIfAAUEMy4yNWRkAg4PDxYCHwAFBDYuNjRkZAIPDw8WAh8ABQUyMC4xOWRkAhAPDxYCHwAFBTM0LjczZGQCEQ8PFgIfAAUFMTguOTFkZAIJD2QWAmYPDxYCHx1oZGQCCg8PFgIfKQUBNGQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAVEPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTQ1MDkmcG9zaXRpb249UCI%2BRGVyZWNrIFJvZHJpZ3VlejwvYT5kZAIDDw8WAh8ABQZHaWFudHNkZAIEDw8WAh8ABQdTRCBAIFNGZGQCBQ8PFgIfAAUDLjQzZGQCBg8PFgIfAAUENi40OGRkAgcPDxYCHwAFBTI2Ljc1ZGQCCA8PFgIfAAUENi4yMmRkAgkPDxYCHwAFBDQuMDZkZAIKDw8WAh8ABQQxLjI5ZGQCCw8PFgIfAAUDLjI0ZGQCDA8PFgIfAAUDLjY0ZGQCDQ8PFgIfAAUEMS42OWRkAg4PDxYCHwAFBDUuOTFkZAIPDw8WAh8ABQUxOS45M2RkAhAPDxYCHwAFBTM0LjM5ZGQCEQ8PFgIfAAUFMTguNDZkZAILD2QWAmYPDxYCHx1oZGQCDA8PFgIfKQUBNWQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAU%2FPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTY5MTgmcG9zaXRpb249UCI%2BTHVrZSBXZWF2ZXI8L2E%2BZGQCAw8PFgIfAAUJQ2FyZGluYWxzZGQCBA8PFgIfAAUJU1RMIEAgTUlMZGQCBQ8PFgIfAAUDLjM3ZGQCBg8PFgIfAAUENi4zMmRkAgcPDxYCHwAFBTI2LjQ5ZGQCCA8PFgIfAAUENS45N2RkAgkPDxYCHwAFBDMuNzhkZAIKDw8WAh8ABQQxLjE1ZGQCCw8PFgIfAAUDLjExZGQCDA8PFgIfAAUDLjkzZGQCDQ8PFgIfAAUEMi4xOGRkAg4PDxYCHwAFBDYuMjBkZAIPDw8WAh8ABQUxOS4wNWRkAhAPDxYCHwAFBTMzLjQ4ZGQCEQ8PFgIfAAUFMTcuNzhkZAIND2QWAmYPDxYCHx1oZGQCDg8PFgIfKQUBNmQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAVAPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTQxNjgmcG9zaXRpb249UCI%2BSm9zZSBCZXJyaW9zPC9hPmRkAgMPDxYCHwAFBVR3aW5zZGQCBA8PFgIfAAUJVEVYIEAgTUlOZGQCBQ8PFgIfAAUDLjQ1ZGQCBg8PFgIfAAUENi4wOGRkAgcPDxYCHwAFBTI1Ljg3ZGQCCA8PFgIfAAUENS43MGRkAgkPDxYCHwAFBDMuNTdkZAIKDw8WAh8ABQQxLjIzZGQCCw8PFgIfAAUDLjExZGQCDA8PFgIfAAUDLjc5ZGQCDQ8PFgIfAAUEMi41M2RkAg4PDxYCHwAFBDYuMDlkZAIPDw8WAh8ABQUxOC41NGRkAhAPDxYCHwAFBTMzLjAxZGQCEQ8PFgIfAAUFMTcuMzdkZAIPD2QWAmYPDxYCHx1oZGQCEA8PFgIfKQUBN2QWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAU%2BPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTM0MDMmcG9zaXRpb249UCI%2BRmVsaXggUGVuYTwvYT5kZAIDDw8WAh8ABQZBbmdlbHNkZAIEDw8WAh8ABQlUT1IgQCBMQUFkZAIFDw8WAh8ABQMuMzZkZAIGDw8WAh8ABQQ2LjA2ZGQCBw8PFgIfAAUFMjUuNTdkZAIIDw8WAh8ABQQ1LjQzZGQCCQ8PFgIfAAUEMy4xNmRkAgoPDxYCHwAFBDEuMTFkZAILDw8WAh8ABQMuMDdkZAIMDw8WAh8ABQQxLjEwZGQCDQ8PFgIfAAUEMi40NmRkAg4PDxYCHwAFBDYuMTNkZAIPDw8WAh8ABQUxOC4zNGRkAhAPDxYCHwAFBTMyLjE5ZGQCEQ8PFgIfAAUFMTcuMDZkZAIRD2QWAmYPDxYCHx1oZGQCEg8PFgIfKQUBOGQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAVAPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTYxMzcmcG9zaXRpb249UCI%2BQ2FybG9zIFJvZG9uPC9hPmRkAgMPDxYCHwAFCVdoaXRlIFNveGRkAgQPDxYCHwAFCU9BSyBAIENXU2RkAgUPDxYCHwAFAy4zM2RkAgYPDxYCHwAFBDUuNTNkZAIHDw8WAh8ABQUyMy43NWRkAggPDxYCHwAFBDQuODJkZAIJDw8WAh8ABQQyLjgyZGQCCg8PFgIfAAUDLjk0ZGQCCw8PFgIfAAUDLjA3ZGQCDA8PFgIfAAUDLjk5ZGQCDQ8PFgIfAAUEMi44MGRkAg4PDxYCHwAFBDYuNTFkZAIPDw8WAh8ABQUxNy45OWRkAhAPDxYCHwAFBTMxLjQ2ZGQCEQ8PFgIfAAUFMTYuOTBkZAITD2QWAmYPDxYCHx1oZGQCFA8PFgIfKQUBOWQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAVAPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTU0NTQmcG9zaXRpb249UCI%2BTmljayBQaXZldHRhPC9hPmRkAgMPDxYCHwAFCFBoaWxsaWVzZGQCBA8PFgIfAAUJUEhJIEAgV1NIZGQCBQ8PFgIfAAUDLjM4ZGQCBg8PFgIfAAUENS45MmRkAgcPDxYCHwAFBTI1LjY3ZGQCCA8PFgIfAAUENS44NWRkAgkPDxYCHwAFBDMuNzdkZAIKDw8WAh8ABQQxLjEzZGQCCw8PFgIfAAUDLjEyZGQCDA8PFgIfAAUDLjgyZGQCDQ8PFgIfAAUEMi42OGRkAg4PDxYCHwAFBDYuMDRkZAIPDw8WAh8ABQUxNi45OWRkAhAPDxYCHwAFBTMxLjIyZGQCEQ8PFgIfAAUFMTYuMDVkZAIVD2QWAmYPDxYCHx1oZGQCFg8PFgIfKQUCMTBkFiRmDw8WAh8daGRkAgEPDxYEHwAFBiZuYnNwOx8daGRkAgIPDxYCHwAFQzxhIGhyZWY9InN0YXRzcy5hc3B4P3BsYXllcmlkPTE2OTc3JnBvc2l0aW9uPVAiPlRyZXZvciBXaWxsaWFtczwvYT5kZAIDDw8WAh8ABQdQaXJhdGVzZGQCBA8PFgIfAAUJQVJJIEAgUElUZGQCBQ8PFgIfAAUDLjQxZGQCBg8PFgIfAAUENi40M2RkAgcPDxYCHwAFBTI2LjM3ZGQCCA8PFgIfAAUENS41OGRkAgkPDxYCHwAFBDMuNzZkZAIKDw8WAh8ABQQxLjE2ZGQCCw8PFgIfAAUDLjE1ZGQCDA8PFgIfAAUDLjUxZGQCDQ8PFgIfAAUEMi4xMmRkAg4PDxYCHwAFBDQuNThkZAIPDw8WAh8ABQUxNy43M2RkAhAPDxYCHwAFBTMwLjg3ZGQCEQ8PFgIfAAUFMTYuMTZkZAIXD2QWAmYPDxYCHx1oZGQCGA8PFgIfKQUCMTFkFiRmDw8WAh8daGRkAgEPDxYEHwAFBiZuYnNwOx8daGRkAgIPDxYCHwAFQzxhIGhyZWY9InN0YXRzcy5hc3B4P3BsYXllcmlkPTQ2NjImcG9zaXRpb249UCI%2BQnJhbmRvbiBNY0NhcnRoeTwvYT5kZAIDDw8WAh8ABQZCcmF2ZXNkZAIEDw8WAh8ABQlCQUwgQCBBVExkZAIFDw8WAh8ABQMuMzZkZAIGDw8WAh8ABQQ1Ljk4ZGQCBw8PFgIfAAUFMjQuNzJkZAIIDw8WAh8ABQQ1Ljc3ZGQCCQ8PFgIfAAUEMy42N2RkAgoPDxYCHwAFBDEuMTZkZAILDw8WAh8ABQMuMDZkZAIMDw8WAh8ABQMuODhkZAINDw8WAh8ABQQxLjQ2ZGQCDg8PFgIfAAUENC45M2RkAg8PDxYCHwAFBTE2LjkzZGQCEA8PFgIfAAUFMjkuMTdkZAIRDw8WAh8ABQUxNS4zOWRkAhkPZBYCZg8PFgIfHWhkZAIaDw8WAh8pBQIxMmQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAU%2FPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTU4NDYmcG9zaXRpb249UCI%2BQWRhbSBQbHV0a288L2E%2BZGQCAw8PFgIfAAUHSW5kaWFuc2RkAgQPDxYCHwAFCURFVCBAIENMRWRkAgUPDxYCHwAFAy4zOGRkAgYPDxYCHwAFBDYuMjBkZAIHDw8WAh8ABQUyNi4xMGRkAggPDxYCHwAFBDYuNDBkZAIJDw8WAh8ABQQzLjgxZGQCCg8PFgIfAAUEMS41NmRkAgsPDxYCHwAFAy4wOWRkAgwPDxYCHwAFAy45NGRkAg0PDxYCHwAFBDEuNjRkZAIODw8WAh8ABQQ1LjAyZGQCDw8PFgIfAAUFMTYuMTdkZAIQDw8WAh8ABQUyOS4wMmRkAhEPDxYCHwAFBTE0Ljg4ZGQCGw9kFgJmDw8WAh8daGRkAhwPDxYCHykFAjEzZBYkZg8PFgIfHWhkZAIBDw8WBB8ABQYmbmJzcDsfHWhkZAICDw8WAh8ABT08YSBocmVmPSJzdGF0c3MuYXNweD9wbGF5ZXJpZD0xNTQ0MCZwb3NpdGlvbj1QIj5NYXR0IEJveWQ8L2E%2BZGQCAw8PFgIfAAUGVGlnZXJzZGQCBA8PFgIfAAUJREVUIEAgQ0xFZGQCBQ8PFgIfAAUDLjM2ZGQCBg8PFgIfAAUENi4zMmRkAgcPDxYCHwAFBTI3LjQ5ZGQCCA8PFgIfAAUENi4yN2RkAgkPDxYCHwAFBDMuNzhkZAIKDw8WAh8ABQQxLjUyZGQCCw8PFgIfAAUDLjA2ZGQCDA8PFgIfAAUDLjkxZGQCDQ8PFgIfAAUEMi44OWRkAg4PDxYCHwAFBDUuMTNkZAIPDw8WAh8ABQUxNS4wNWRkAhAPDxYCHwAFBTI4LjgwZGQCEQ8PFgIfAAUFMTQuMjVkZAIdD2QWAmYPDxYCHx1oZGQCHg8PFgIfKQUCMTRkFiRmDw8WAh8daGRkAgEPDxYEHwAFBiZuYnNwOx8daGRkAgIPDxYCHwAFQDxhIGhyZWY9InN0YXRzcy5hc3B4P3BsYXllcmlkPTM1NDMmcG9zaXRpb249UCI%2BQ2xheSBCdWNoaG9sejwvYT5kZAIDDw8WAh8ABQxEaWFtb25kYmFja3NkZAIEDw8WAh8ABQlBUkkgQCBQSVRkZAIFDw8WAh8ABQMuMzRkZAIGDw8WAh8ABQQ2LjQwZGQCBw8PFgIfAAUFMjYuNzJkZAIIDw8WAh8ABQQ2LjI4ZGQCCQ8PFgIfAAUENC4xMmRkAgoPDxYCHwAFBDEuMjhkZAILDw8WAh8ABQMuMTZkZAIMDw8WAh8ABQMuNzNkZAINDw8WAh8ABQQxLjg4ZGQCDg8PFgIfAAUENC4zM2RkAg8PDxYCHwAFBTE1LjUzZGQCEA8PFgIfAAUFMjguMTZkZAIRDw8WAh8ABQUxNC4yMmRkAh8PZBYCZg8PFgIfHWhkZAIgDw8WAh8pBQIxNWQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAVCPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTUwMzgmcG9zaXRpb249UCI%2BR2VybWFuIE1hcnF1ZXo8L2E%2BZGQCAw8PFgIfAAUHUm9ja2llc2RkAgQPDxYCHwAFCU1JQSBAIENPTGRkAgUPDxYCHwAFAy4zNWRkAgYPDxYCHwAFBDUuNjFkZAIHDw8WAh8ABQUyNC4zOWRkAggPDxYCHwAFBDYuMDhkZAIJDw8WAh8ABQQzLjkzZGQCCg8PFgIfAAUEMS4zMWRkAgsPDxYCHwAFAy4xOGRkAgwPDxYCHwAFAy42NmRkAg0PDxYCHwAFBDIuMDBkZAIODw8WAh8ABQQ1LjMxZGQCDw8PFgIfAAUFMTUuMTNkZAIQDw8WAh8ABQUyNy45MWRkAhEPDxYCHwAFBTE0LjE5ZGQCIQ9kFgJmDw8WAh8daGRkAiIPDxYCHykFAjE2ZBYkZg8PFgIfHWhkZAIBDw8WBB8ABQYmbmJzcDsfHWhkZAICDw8WAh8ABUE8YSBocmVmPSJzdGF0c3MuYXNweD9wbGF5ZXJpZD0yNjA4JnBvc2l0aW9uPVAiPkpob3VseXMgQ2hhY2luPC9hPmRkAgMPDxYCHwAFB0JyZXdlcnNkZAIEDw8WAh8ABQlTVEwgQCBNSUxkZAIFDw8WAh8ABQMuMzNkZAIGDw8WAh8ABQQ1LjczZGQCBw8PFgIfAAUFMjQuNDdkZAIIDw8WAh8ABQQ1LjI3ZGQCCQ8PFgIfAAUEMy40MmRkAgoPDxYCHwAFBDEuMDZkZAILDw8WAh8ABQMuMTBkZAIMDw8WAh8ABQMuNzBkZAINDw8WAh8ABQQyLjYwZGQCDg8PFgIfAAUENC45MGRkAg8PDxYCHwAFBTE1LjI5ZGQCEA8PFgIfAAUFMjcuNzRkZAIRDw8WAh8ABQUxNC4xOGRkAiMPZBYCZg8PFgIfHWhkZAIkDw8WAh8pBQIxN2QWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAVDPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTcwMTgmcG9zaXRpb249UCI%2BSmVmcnkgUm9kcmlndWV6PC9hPmRkAgMPDxYCHwAFCU5hdGlvbmFsc2RkAgQPDxYCHwAFCVBISSBAIFdTSGRkAgUPDxYCHwAFAy4zMmRkAgYPDxYCHwAFBDUuNjlkZAIHDw8WAh8ABQUyNS4xMWRkAggPDxYCHwAFBDUuNThkZAIJDw8WAh8ABQQzLjU1ZGQCCg8PFgIfAAUEMS4wOGRkAgsPDxYCHwAFAy4xMGRkAgwPDxYCHwAFAy44NGRkAg0PDxYCHwAFBDMuMDVkZAIODw8WAh8ABQQ1LjM0ZGQCDw8PFgIfAAUFMTQuMzlkZAIQDw8WAh8ABQUyNy41OGRkAhEPDxYCHwAFBTEzLjYzZGQCJQ9kFgJmDw8WAh8daGRkAiYPDxYCHykFAjE4ZBYkZg8PFgIfHWhkZAIBDw8WBB8ABQYmbmJzcDsfHWhkZAICDw8WAh8ABT48YSBocmVmPSJzdGF0c3MuYXNweD9wbGF5ZXJpZD0xOTMxNiZwb3NpdGlvbj1QIj5FcmljIExhdWVyPC9hPmRkAgMPDxYCHwAFBlBhZHJlc2RkAgQPDxYCHwAFB1NEIEAgU0ZkZAIFDw8WAh8ABQMuMzBkZAIGDw8WAh8ABQQ1Ljg5ZGQCBw8PFgIfAAUFMjUuODlkZAIIDw8WAh8ABQQ2LjM5ZGQCCQ8PFgIfAAUENC4zOGRkAgoPDxYCHwAFBDEuMzJkZAILDw8WAh8ABQMuMjVkZAIMDw8WAh8ABQMuNDRkZAINDw8WAh8ABQQyLjUyZGQCDg8PFgIfAAUENC44NWRkAg8PDxYCHwAFBTEzLjgzZGQCEA8PFgIfAAUFMjcuMDlkZAIRDw8WAh8ABQUxMy4wNmRkAicPZBYCZg8PFgIfHWhkZAIoDw8WAh8pBQIxOWQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAU%2BPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTM2OTAmcG9zaXRpb249UCI%2BU2FsIFJvbWFubzwvYT5kZAIDDw8WAh8ABQRSZWRzZGQCBA8PFgIfAAUJQ0hDIEAgQ0lOZGQCBQ8PFgIfAAUDLjI5ZGQCBg8PFgIfAAUENS45M2RkAgcPDxYCHwAFBTI1LjcwZGQCCA8PFgIfAAUENi4wM2RkAgkPDxYCHwAFBDMuNTJkZAIKDw8WAh8ABQQxLjMwZGQCCw8PFgIfAAUDLjEyZGQCDA8PFgIfAAUEMS4wOWRkAg0PDxYCHwAFBDIuNDFkZAIODw8WAh8ABQQ1LjAzZGQCDw8PFgIfAAUFMTQuMjBkZAIQDw8WAh8ABQUyNi43N2RkAhEPDxYCHwAFBTEzLjIyZGQCKQ9kFgJmDw8WAh8daGRkAioPDxYCHykFAjIwZBYkZg8PFgIfHWhkZAIBDw8WBB8ABQYmbmJzcDsfHWhkZAICDw8WAh8ABT88YSBocmVmPSJzdGF0c3MuYXNweD9wbGF5ZXJpZD0xNDg3NSZwb3NpdGlvbj1QIj5DYWxlYiBTbWl0aDwvYT5kZAIDDw8WAh8ABQdNYXJsaW5zZGQCBA8PFgIfAAUJTUlBIEAgQ09MZGQCBQ8PFgIfAAUDLjMxZGQCBg8PFgIfAAUENS41MGRkAgcPDxYCHwAFBTI0LjM4ZGQCCA8PFgIfAAUENi4wMmRkAgkPDxYCHwAFBDMuNjVkZAIKDw8WAh8ABQQxLjI5ZGQCCw8PFgIfAAUDLjIyZGQCDA8PFgIfAAUDLjg3ZGQCDQ8PFgIfAAUEMi40OGRkAg4PDxYCHwAFBDUuNDNkZAIPDw8WAh8ABQUxMy43MmRkAhAPDxYCHwAFBTI2LjQ3ZGQCEQ8PFgIfAAUFMTMuMDRkZAIrD2QWAmYPDxYCHx1oZGQCLA8PFgIfKQUCMjFkFiRmDw8WAh8daGRkAgEPDxYEHwAFBiZuYnNwOx8daGRkAgIPDxYCHwAFQjxhIGhyZWY9InN0YXRzcy5hc3B4P3BsYXllcmlkPTQ4NjkmcG9zaXRpb249UCI%2BTWlrZSBNb250Z29tZXJ5PC9hPmRkAgMPDxYCHwAFBEN1YnNkZAIEDw8WAh8ABQlDSEMgQCBDSU5kZAIFDw8WAh8ABQMuNDBkZAIGDw8WAh8ABQQ1LjYyZGQCBw8PFgIfAAUFMjMuOTlkZAIIDw8WAh8ABQQ1LjMxZGQCCQ8PFgIfAAUEMy40OWRkAgoPDxYCHwAFBDEuMDFkZAILDw8WAh8ABQMuMDlkZAIMDw8WAh8ABQMuNzJkZAINDw8WAh8ABQQyLjM3ZGQCDg8PFgIfAAUENC4yOGRkAg8PDxYCHwAFBTE0LjE3ZGQCEA8PFgIfAAUFMjUuODNkZAIRDw8WAh8ABQUxMy4wNWRkAi0PZBYCZg8PFgIfHWhkZAIuDw8WAh8pBQIyMmQWJGYPDxYCHx1oZGQCAQ8PFgQfAAUGJm5ic3A7Hx1oZGQCAg8PFgIfAAU%2BPGEgaHJlZj0ic3RhdHNzLmFzcHg%2FcGxheWVyaWQ9MTYxMzAmcG9zaXRpb249UCI%2BRGF2aWQgSGVzczwvYT5kZAIDDw8WAh8ABQdPcmlvbGVzZGQCBA8PFgIfAAUJQkFMIEAgQVRMZGQCBQ8PFgIfAAUDLjM1ZGQCBg8PFgIfAAUENi4xMGRkAgcPDxYCHwAFBTI2LjEzZGQCCA8PFgIfAAUENi4yMGRkAgkPDxYCHwAFBDMuODhkZAIKDw8WAh8ABQQxLjM4ZGQCCw8PFgIfAAUDLjE4ZGQCDA8PFgIfAAUDLjc2ZGQCDQ8PFgIfAAUEMi4yNmRkAg4PDxYCHwAFBDQuMTlkZAIPDw8WAh8ABQUxMy43MWRkAhAPDxYCHwAFBTI2LjA1ZGQCEQ8PFgIfAAUFMTIuNjhkZAIvD2QWAmYPDxYCHx1oZGQCMA8PFgIfKQUCMjNkFiRmDw8WAh8daGRkAgEPDxYEHwAFBiZuYnNwOx8daGRkAgIPDxYCHwAFQTxhIGhyZWY9InN0YXRzcy5hc3B4P3BsYXllcmlkPTEyMDIyJnBvc2l0aW9uPVAiPk1hdHQgQW5kcmllc2U8L2E%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%2BQmFydG9sbyBDb2xvbjwvYT5kZAIDDw8WAh8ABQdSYW5nZXJzZGQCBA8PFgIfAAUJVEVYIEAgTUlOZGQCBQ8PFgIfAAUDLjI1ZGQCBg8PFgIfAAUENS40MWRkAgcPDxYCHwAFBTIzLjg3ZGQCCA8PFgIfAAUENi44NWRkAgkPDxYCHwAFBDMuOTlkZAIKDw8WAh8ABQQxLjU3ZGQCCw8PFgIfAAUDLjE5ZGQCDA8PFgIfAAUEMS4xMGRkAg0PDxYCHwAFBDEuMzNkZAIODw8WAh8ABQQyLjg4ZGQCDw8PFgIfAAUENy44MGRkAhAPDxYCHwAFBTE3LjEzZGQCEQ8PFgIfAAUENy4wNmRkAjsPZBYCZg8PFgIfHWhkZAICDw9kFgIeBXN0eWxlBQ1kaXNwbGF5Om5vbmU7FgJmDzwrAA0BAA8WBAUbVXNlQ29sdW1uSGVhZGVyc0FzU2VsZWN0b3JzaAUYVXNlUm93SGVhZGVyc0FzU2VsZWN0b3JzaA8WBB8gaB8faGRkAhIPPCsADgIAFCsAAmQXAQUIUGFnZVNpemUCHgEWAhYLZGRlFCsAAAsrCAE8KwAHAAsrCQFkZGRkZmQYBQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgYFEURGU0JvYXJkMSR0c1N0YXRzBRRERlNCb2FyZDEkdHNQb3NpdGlvbgURREZTQm9hcmQxJHJjYlRlYW0FE0RGU0JvYXJkMSRyY2JMZWFndWUFEERGU0JvYXJkMSR0c1Byb2oFDURGU0JvYXJkMSRkZzEFMERGU0JvYXJkMSRkZzEkY3RsMDAkY3RsMDMkY3RsMDEkUGFnZVNpemVDb21ib0JveA8UKwACZQUCMzBkBTBERlNCb2FyZDEkZGcxJGN0bDAwJGN0bDAyJGN0bDAwJFBhZ2VTaXplQ29tYm9Cb3gPFCsAAmUFAjMwZAUTREZTQm9hcmQxJHJjYkxlYWd1ZQ8UKwACBQNBbGwFA2FsbGQFEURGU0JvYXJkMSRyY2JUZWFtDxQrAAIFCUFsbCBUZWFtcwUBMGSCJuMG990cOve2jTYOpfKNz908Pg%3D%3D&__VIEWSTATEGENERATOR=4322825F&__SCROLLPOSITIONX=0&__SCROLLPOSITIONY=240&__EVENTVALIDATION=%2FwEdAAIXmwy4xuYG0GHeMeWgiFLBW7Cx7pxQ6rTkSXhTSRrtGbuKNfDIONY3oLXGzVk%2B7ppbywKo&DFSBoard1_tsStats_ClientState=%7B%22selectedIndexes%22%3A%5B%221%22%5D%2C%22logEntries%22%3A%5B%5D%2C%22scrollState%22%3A%7B%7D%7D&DFSBoard1_tsPosition_ClientState=%7B%22selectedIndexes%22%3A%5B%220%22%5D%2C%22logEntries%22%3A%5B%5D%2C%22scrollState%22%3A%7B%7D%7D&DFSBoard1%24rcbTeam=All+Teams&DFSBoard1_rcbTeam_ClientState=&DFSBoard1%24rcbLeague=All&DFSBoard1_rcbLeague_ClientState=&DFSBoard1_tsProj_ClientState=%7B%22selectedIndexes%22%3A%5B%220%22%5D%2C%22logEntries%22%3A%5B%5D%2C%22scrollState%22%3A%7B%7D%7D&DFSBoard1_dg1_ClientState='

# set the type of the body for the HTTP request as headers. Per wikipedia
# https://en.wikipedia.org/wiki/Percent-encoding#The_application/x-www-form-urlencoded_type
# When sent in an HTTP POST request or via email, the data is placed in the 
# body of the message, and application/x-www-form-urlencoded is included in the 
# message's Content-Type header
headers = {'Content-Type' : 'application/x-www-form-urlencoded'}

# package the POST request, send & catch response
r = requests.post(batters_url, data=data, headers=headers)
print(r.status_code, r.ok)
# extract response data
sabersim_data = r.text

print(sabersim_data)


